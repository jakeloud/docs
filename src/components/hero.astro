---
import { Image } from 'astro:assets';

const PAGE_TITLE_ID = '_top';

import { LinkButton, Code } from '@astrojs/starlight/components'

const { data } = Astro.props.entry;
const { title = data.title, tagline, image, actions = [] } = data.hero || {};

const imageAttrs = {
	loading: 'eager' as const,
	decoding: 'async' as const,
	width: 400,
	height: 400,
	alt: image?.alt || '',
};

const installCommand = `curl -fsSL https://jakeloud.com/install-all | sh`

let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
let rawHtml: string | undefined;
if (image) {
	if ('file' in image) {
		darkImage = image.file;
	} else if ('dark' in image) {
		darkImage = image.dark;
		lightImage = image.light;
	} else {
		rawHtml = image.html;
	}
}
---

<div class="hero">
  <canvas id="c" class="canvas"/>
  <script>
    c.width = 1920
    c.height = 1080
    const x = c.getContext`2d`
    let Z = 0, X = 0, w

    const u=(t)=>{
      t/=1000
      const r=_=>x.lineTo(w/2+(X-21)/Z*w-15,2/Z*w)
      for(let i=w=c.width|=0;i--;r(Z++),r(X--))X=i%40,r(Z=1-t*9%1+i/40)
        x.strokeStyle='#f0f'
        x.fillStyle='#0000'
        x.fillRect(0,0,w,w)
        x.stroke()
        requestAnimationFrame(u)
    }
    u(0)
  </script>
	{
		darkImage && (
			<Image
				src={darkImage}
				{...imageAttrs}
				class:list={{ 'light:sl-hidden': Boolean(lightImage) }}
			/>
		)
	}
	{lightImage && <Image src={lightImage} {...imageAttrs} class="dark:sl-hidden" />}
	{rawHtml && <div class="hero-html sl-flex" set:html={rawHtml} />}
	<div class="sl-flex stack">
		<div class="sl-flex copy">
			<h1 id={PAGE_TITLE_ID} data-page-title set:html={title} />
			{tagline && <div class="tagline" set:html={tagline} />}
		</div>
		{
			actions.length > 0 && (
				<div class="sl-flex actions">
					{actions.map(
						({ attrs: { class: className, ...attrs } = {}, icon, link: href, text, variant }) => (
							<LinkButton {href} {variant} icon={icon?.name} class:list={[className]} {...attrs}>
								{text}
								{icon?.html && <Fragment set:html={icon.html} />}
							</LinkButton>
						)
					)}
          <Code
            class="code"
            language="bash"
            code={installCommand}
          />
				</div>
			)
		}
	</div>
</div>

<style>
	.hero {
		display: flex;
    flex-direction: column;
		align-items: center;
		gap: 1rem;
		padding-bottom: 1rem;

    text-align: center;
    position: relative;
    overflow: hidden;
    min-height: 500px;

    padding-top: 4rem;
	}

  .code {
    max-width: 100%;
  }

  .canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }

	.hero > img,
	.hero > .hero-html {
		object-fit: contain;
		width: min(70%, 20rem);
		height: auto;
		margin-inline: auto;
	}

	.stack {
		flex-direction: column;
		gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
		text-align: center;
	}

	.copy {
		flex-direction: column;
		gap: 1rem;
		align-items: center;
	}

	.copy > * {
		max-width: 50ch;
	}

	h1 {
		font-size: clamp(var(--sl-text-3xl), calc(0.25rem + 5vw), var(--sl-text-6xl));
		line-height: var(--sl-line-height-headings);
		font-weight: 600;
		color: var(--sl-color-white);
	}

	.tagline {
		font-size: clamp(var(--sl-text-base), calc(0.0625rem + 2vw), var(--sl-text-xl));
		color: var(--sl-color-gray-2);
	}

	.actions {
		gap: 1rem 2rem;
		flex-wrap: wrap;
		justify-content: center;
    flex-direction: column;
	}
  .actions>*{
    width: max-content;
  }

	@media (min-width: 50rem) {
		.hero {
			grid-template-columns: 7fr 4fr;
			gap: 3%;
			padding-block: clamp(2.5rem, calc(1rem + 10vmin), 10rem);
		}

		.hero > img,
		.hero > .hero-html {
			order: 2;
			width: min(100%, 25rem);
		}

		.stack {
			text-align: start;
		}

		.copy {
		}

		.actions {
			justify-content: flex-start;
		}
	}
</style>
